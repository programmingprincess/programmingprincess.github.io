<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-22T16:02:05-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jiaqi Wu</title><subtitle>Computer science student at University of Illinois.
</subtitle><entry><title type="html">TCGA Data Parsing</title><link href="http://localhost:4000/2020/02/13/tcga-prep.html" rel="alternate" type="text/html" title="TCGA Data Parsing" /><published>2020-02-13T00:00:00-07:00</published><updated>2020-02-13T00:00:00-07:00</updated><id>http://localhost:4000/2020/02/13/tcga-prep</id><content type="html" xml:base="http://localhost:4000/2020/02/13/tcga-prep.html">&lt;h2 id=&quot;download-reference-file-gdc-uses-grch38-the-exact-file-is-provided-on-their-site&quot;&gt;Download reference file (GDC uses GRCh38; the exact file is provided on their site)&lt;/h2&gt;

&lt;p&gt;https://gdc.cancer.gov/about-data/data-harmonization-and-generation/gdc-reference-files&lt;/p&gt;

&lt;h2 id=&quot;go-over-basics-like-query-relevance-score-etc&quot;&gt;go over basics like query, relevance score, etc&lt;/h2&gt;
&lt;h2 id=&quot;components-of-an-academic-paper&quot;&gt;components of an academic paper&lt;/h2&gt;

&lt;h2 id=&quot;go-over-the-different-types-of-search-algorithms&quot;&gt;go over the different types of search algorithms&lt;/h2&gt;

&lt;h2 id=&quot;what-are-learning-to-rank-algorithms-some-github-repositories-for-them-lambdarank&quot;&gt;what are learning to rank algorithms, some github repositories for them (LambdaRANK)&lt;/h2&gt;

&lt;h2 id=&quot;evaluation-metrics-ndcg&quot;&gt;evaluation metrics NDCG&lt;/h2&gt;

&lt;details&gt;&lt;summary&gt;More on miRNA isoforms&lt;/summary&gt;
&lt;p&gt;

Each row in the isoforms file contains the calculated expression for each individual miRNA isoform observed, per sample. A common way to process this data is by taking the max or sum of all counts associated with a specific miRNA. If there are multiple isoforms for a given miRNA in each sample, then the expression is summed. 

&lt;/p&gt;
&lt;/details&gt;

&lt;h2 id=&quot;2-dna-methylation-expression-profiles&quot;&gt;2: DNA methylation expression profiles&lt;/h2&gt;

&lt;p&gt;DNA methylation was a little more complicated than miRNAs, and I could no longer use the same script to turn individual samples into one big matrix. So, I had to do some more digging.&lt;/p&gt;

&lt;h3 id=&quot;21-downloading-tcga-data-using-tcga2stat&quot;&gt;2.1: Downloading TCGA data using TCGA2STAT&lt;/h3&gt;

&lt;p&gt;I found an R package &lt;a href=&quot;http://www.liuzlab.org/TCGA2STAT/&quot;&gt;TCGA2STAT&lt;/a&gt; that enables users to directly download TCGA data into an analysis-ready format, which is exactly what I was looking for.&lt;/p&gt;

&lt;p&gt;Because I only needed it for methylation, I extracted the code relevant to DNA methylation. The altered version is available in my &lt;a href=&quot;https://github.com/programmingprincess/tumor-origin/blob/master/dnam/tcga2stat.R&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TCGA2STAT allows you to specify the type of data you wish to download; I used Illumina 27K methylation profiles.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# 27K is selected by default&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methyl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTCGA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LUAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data.type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Methylation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# 450K example—450K isn't available for every dataset. Check in TCGA before downloading &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# methyl &amp;lt;- getTCGA(disease=&quot;LUAD&quot;, data.type=&quot;Methylation&quot;, type=&quot;450K&quot;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Table of samples vs. CpG site beta-values is found in $dat &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methyl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Script to see distribution of primary/metastatic/normal tissue. &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strsplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lapply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;`[[`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recursive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Replace sample names, transform, and add label.  &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replacement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'_'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as.data.frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Add row names to make sure table prints out correctly in .txt format &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Row.names&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rownames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write.table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paste0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LUAD-methyl-labeled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row.names&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col.names&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;$dat&lt;/code&gt; attribute of the returned data structure gives us a matrix, where, again, the rows represent a CpG site and columns represent a sample. I transform the matrix, add a label for the origin site/disease type (i.e., LUAD), and store as a .txt file. This is repeated for each origin site I wanted to look at, and then all the .txt files are merged, resulting in a matrix with their labeled origin sites.&lt;/p&gt;

&lt;h3 id=&quot;22-feature-selection-in-r&quot;&gt;2.2: Feature selection in R&lt;/h3&gt;

&lt;p&gt;Since DNA methylation yields a much larger dataset, I did some feature selection before transforming the data matrix. I removed all features (CpG sites) with more than 30% “NA” values. If you want to go even further with the feature selection at this stage, you can consider filtering the matrix based on differential expression using &lt;a href=&quot;https://stackoverflow.com/questions/17003928/r-filter-matrix-based-on-variance-cut-offs&quot;&gt;variance cut-offs&lt;/a&gt; or &lt;a href=&quot;https://bioconductor.org/packages/release/bioc/html/limma.html&quot;&gt;limma&lt;/a&gt;. You can filter for differential expression between different origin sites, between tumor vs. normal tissue samples, etc.&lt;/p&gt;

&lt;h2 id=&quot;3-conclusion&quot;&gt;3: Conclusion&lt;/h2&gt;

&lt;p&gt;Now, we have two datasets ready to be analyzed in Python. Examples of how to build machine learning models based on the processed data are available on &lt;a href=&quot;https://github.com/programmingprincess/tumor-origin&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main effort was processing TCGA data, a step that I could only find very scattered documentation for. Hope this post helps other beginners trying to work with microRNA and DNA methylation data! :)&lt;/p&gt;

&lt;p&gt;Here’s a list of resources I referenced for data processing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Biostar: &lt;a href=&quot;https://www.biostars.org/p/101182/&quot;&gt;miRNAseq isoform quantification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;R packages: &lt;a href=&quot;http://www.liuzlab.org/TCGA2STAT/&quot;&gt;TCGA2STAT&lt;/a&gt;, &lt;a href=&quot;https://bioconductor.org/packages/release/bioc/html/limma.html&quot;&gt;Bioconductor limma&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GitHub: &lt;a href=&quot;https://github.com/rptashkin/TCGA_miRNASeq_matrix&quot;&gt;rptashkin’s miRNAseq matrix script&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Stack Overflow: feature selection based on &lt;a href=&quot;https://stackoverflow.com/questions/17003928/r-filter-matrix-based-on-variance-cut-offs&quot;&gt;variance cut-offs&lt;/a&gt; in R&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="learning to rank" /><category term="text" /><category term="data mining" /><category term="search engines" /><category term="supervised learning" /><summary type="html">Download reference file (GDC uses GRCh38; the exact file is provided on their site)</summary></entry><entry><title type="html">How to build an academic search engine</title><link href="http://localhost:4000/2020/01/17/ltr.html" rel="alternate" type="text/html" title="How to build an academic search engine" /><published>2020-01-17T00:00:00-07:00</published><updated>2020-01-17T00:00:00-07:00</updated><id>http://localhost:4000/2020/01/17/ltr</id><content type="html" xml:base="http://localhost:4000/2020/01/17/ltr.html">&lt;p&gt;In a text mining course, we were tasked with building a search engine and competing with the class to obtain the most relevant search results given a specific query. Most of us had no idea where to start.&lt;/p&gt;

&lt;p&gt;But, it turns out that we can decompose this problem into a simple supervised learning problem, and use a series of published “learning-to-rank” algorithms to help. A few terms and assumptions to clear up before we start:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There are supervised and unsupervised algorithms to tackle this task. However, for supervised methods, we must have &lt;em&gt;annotated query relevance scores&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to follow along in our GitHub &lt;a href=&quot;https://github.com/programmingprincess/tasty-search/&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;input&quot;&gt;Input&lt;/h2&gt;

&lt;p&gt;We need three things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Queries&lt;/li&gt;
  &lt;li&gt;Documents (paper metadata: title, authors, abstract, keywords, number of citations, etc.)&lt;/li&gt;
  &lt;li&gt;Query-document relevance score (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Queries are straight forward–these are the search terms that a user would enter to find a paper. Here’s an example of what the queries look like:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{'0': ['information', 'retrieval'],
 '1': ['autoencoder'],
 '10': ['category', 'theory'],
 '11': ['smart', 'thermostat'],
 '12': ['spatial', 'multi', 'agent', 'systems'],
 '13': ['3', 'axis', 'gantry'],
 '14': ['cryptography'],
 '15': ['parametric', 'max', 'flow'],
 '16': ['graph', 'drawing'],
 '17': ['duality'],
 '18': ['fdir'],
 '19': ['personality', 'trait'],
 '2': ['sentiment', 'analysis'],
 '3': ['audio', 'visual', 'fusion'],
 '4': ['object', 'detection'],
 '5': ['gfdm'],
 '6': ['information', 'geometry'],
 '7': ['augmented', 'reality'],
 '8': ['prolog'],
 '9': ['wifi', 'malware']}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In terms of documents, we ideally want to extract the metadata that best defines a paper. This can include its title, abstract, figure captions, journal of publication, or authors. Basically, these represent the text where we would expect &lt;em&gt;most&lt;/em&gt; user search terms to show up. We could include the entire paper, and some methods do utilize the entire paper, but that would be extremely computationally expensive.&lt;/p&gt;

&lt;p&gt;There are lots of &lt;a href=&quot;https://guides.lib.berkeley.edu/information-studies/apis&quot;&gt;resources&lt;/a&gt; with free APIs for gathering papers from scholarly journals.&lt;/p&gt;

&lt;p&gt;Finally, we have the relevance score. Given a search query and a document, the relevance score measures the similarity between the query and document. If we want take a supervised learning approach, then these scores are required for the queries in the training set. In the example below, relevance scores are assigned a value from 0 to 4, with 4 being the highest degree of relevance.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;query_id	doc_id	relevance
0       2277       2
0       373f       4
0       72d3       3
0       39f6       1
0       5ca4       0
0       013c       2
0       2c03       3
0       12d1       0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Relevance scores can be obtained in a number of ways. They can be collected from users actively or passively (manual ranking vs. calculating clicks from a search engine), or computed based on terms from the query occuring in the document (unsupervised ranking algorithms). Either way, they are difficult to obtain, as they can be collected only through large search engines such as Google, or through labor-intensive annotations.&lt;/p&gt;

&lt;h2 id=&quot;unsupervised-ranking-algorithms&quot;&gt;Unsupervised ranking algorithms&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Okapi_BM25&quot;&gt;Okapi BM25&lt;/a&gt; is a simple baseline retrieval function to rank a set of documents for a query. Given a query, BM25 uses a bag-of-words approach to rank documents based on query terms that appear in each document. Documents that frequently mention the query terms will be ranked higher than documents that do not mention the query terms at all. Other unsupervised approaches include TF-IDF and language models.&lt;/p&gt;

&lt;p&gt;In our project, we used &lt;a href=&quot;https://github.com/meta-toolkit/metapy&quot;&gt;metapy&lt;/a&gt; to index and rank our documents according to BM25. Metapy also supports language models, as well as other text mining functions that they cover in their &lt;a href=&quot;https://meta-toolkit.org/&quot;&gt;documentation&lt;/a&gt;. The example below shows our query-document BM25 scores against the query “information retreival”. Compared to the absolute relevance scores from above, we see the matching doc_id &lt;code class=&quot;highlighter-rouge&quot;&gt;72d3&lt;/code&gt;. This document recieved a score of 8.78 for our query, and was given a relevance of 3/4 by users. However, we’ll notice that a lot of the other relevant documents do not show up in the top results from BM25.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;query_id	doc_id	bm25_score
0       391b        9.27404975891
0       ea9a        8.99035835266
0       5ca4        8.92638778687
0       72d3        8.78375816345
0       0a85        8.7498960495
0       31e1        8.73628807068
0       9228        8.73235225677
0       d618        8.68366146088
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The limitations of an unsupervised ranking algorithm is that tail-end queries or queries with a vocabulary gap are not likely to be listed in the search results. For instance, if the query is “pregnancy clothes,” a listing for “maternity dress” will never intersect with the query term because the exact query terms do not show up in the document. This is where supervised ranking comes in handy, so that with real user data, we can identify synonymous terms in our data.&lt;/p&gt;

&lt;p&gt;If you do not have training relevance scores on hand, unsupervised algorithms alone are enough to complete your search engine. For a given query, we would need to compute its BM25 score against every document in the database; the query-document pairs with the highest score will be returned. Just remember the limitations!&lt;/p&gt;

&lt;h2 id=&quot;supervised-ranking-algorithms&quot;&gt;Supervised ranking algorithms&lt;/h2&gt;

&lt;p&gt;You can follow along in our &lt;a href=&quot;https://github.com/programmingprincess/tasty-search/blob/master/supervised_methods.ipynb&quot;&gt;jupyter notebook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our features will be the unsupervised attributes calculated in the previous steps–these are relevance scores for each query-document pair in the training set. Crucially, we will need the relevance scores collected from users, either actively or passively, as the labels.&lt;/p&gt;

&lt;p&gt;For each query-document pair, we will have their BM25 score, language model, additional metadata (such as number of citations) as features, and their user-ranked relevance score.&lt;/p&gt;

&lt;p&gt;https://www.microsoft.com/en-us/research/publication/from-ranknet-to-lambdarank-to-lambdamart-an-overview/&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;evaluation-metrics&quot;&gt;Evaluation metrics&lt;/h2&gt;

&lt;p&gt;Normalized Discounted Cumulative Gain&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# 27K is selected by default&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methyl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTCGA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LUAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data.type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Methylation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# 450K example—450K isn't available for every dataset. Check in TCGA before downloading &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# methyl &amp;lt;- getTCGA(disease=&quot;LUAD&quot;, data.type=&quot;Methylation&quot;, type=&quot;450K&quot;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Table of samples vs. CpG site beta-values is found in $dat &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methyl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write.table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paste0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LUAD-methyl-labeled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row.names&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col.names&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s a list of resources that helped me:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.lib.berkeley.edu/information-studies/apis&quot;&gt;Berkeley Library&lt;/a&gt; for paper APIs&lt;/li&gt;
  &lt;li&gt;Deep dive into &lt;a href=&quot;https://moz.com/blog/determining-relevance-how-similarity-is-scored&quot;&gt;query relevance&lt;/a&gt; scores&lt;/li&gt;
  &lt;li&gt;Okapi &lt;a href=&quot;https://en.wikipedia.org/wiki/Okapi_BM25&quot;&gt;BM25&lt;/a&gt; formual&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/from-ranknet-to-lambdarank-to-lambdamart-an-overview/&quot;&gt;LambdaMART&lt;/a&gt; supervised learning-to-rank algorithm&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="learning to rank" /><category term="ltr" /><category term="text" /><category term="data mining" /><category term="search engine" /><category term="supervised learning" /><category term="BM25" /><summary type="html">In a text mining course, we were tasked with building a search engine and competing with the class to obtain the most relevant search results given a specific query. Most of us had no idea where to start.</summary></entry><entry><title type="html">Prepping TCGA data for machine learning projects</title><link href="http://localhost:4000/2019/01/05/tcga.html" rel="alternate" type="text/html" title="Prepping TCGA data for machine learning projects" /><published>2019-01-05T00:00:00-07:00</published><updated>2019-01-05T00:00:00-07:00</updated><id>http://localhost:4000/2019/01/05/tcga</id><content type="html" xml:base="http://localhost:4000/2019/01/05/tcga.html">&lt;p&gt;Last semester, I wanted to explore the role of epigenetic markers in differentiating types of cancers for a course project. I turned to The Cancer Genome Atlas’s (TCGA) &lt;a href=&quot;https://portal.gdc.cancer.gov/&quot;&gt;data portal&lt;/a&gt;, which contains 7 types of genomic data for 33 types of cancer.&lt;/p&gt;

&lt;p&gt;Processing and organizing the data from TCGA to a form that I could use for Tensorflow turned out to be the most difficult part of this project, so here are the steps I followed, and resources I found helpful along the way.&lt;/p&gt;

&lt;h2 id=&quot;1-microrna-mirna-expression-profiles&quot;&gt;1: MicroRNA (miRNA) expression profiles&lt;/h2&gt;

&lt;p&gt;I started by reading discussions on Biostars. I was surprised by the lack of detailed documentation for handling TCGA data for beginners.&lt;/p&gt;

&lt;h3 id=&quot;11-bulk-downloading-raw-data-with-gdc&quot;&gt;1.1: Bulk downloading raw data with GDC&lt;/h3&gt;

&lt;p&gt;I downloaded 17 datasets from &lt;a href=&quot;https://portal.gdc.cancer.gov/&quot;&gt;TCGA&lt;/a&gt;. TCGA has two tiers of data: free and controlled. The controlled set requires special access (you need to apply for it). So instead, I chose only the TXT files (consisting of transcriptome profiles). This sped up my processing a bit, since the controlled tier contains BAM sequencing reads of ~&lt;code class=&quot;highlighter-rouge&quot;&gt;60-200MB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once I had all my TXT files for one tissue origin site in the cart, I downloaded the GDC Manifest. The manifest is just a file containing a list of the files you have requested. Since I was downloading to a cluster, I used the &lt;a href=&quot;https://gdc.cancer.gov/access-data/gdc-data-transfer-tool&quot;&gt;GDC-Client&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./gdc-client download -m $MANIFEST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: The expression profiles only give you the &lt;code class=&quot;highlighter-rouge&quot;&gt;miRNA_ID&lt;/code&gt; and sequencing read information; if you want more information about the sample (i.e., metastatic, primary, or normal tissue), you have to download the Sample Sheet from TCGA as well.&lt;/p&gt;

&lt;h3 id=&quot;12-preparing-the-data-using-r&quot;&gt;1.2: Preparing the data using R&lt;/h3&gt;

&lt;p&gt;Each sample downloaded creates a new folder in your download directory, and inside the folder are two files: &lt;code class=&quot;highlighter-rouge&quot;&gt;*.mirbase21.mirnas.quantification.txt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*.mirbase21.isoforms.quantification.txt&lt;/code&gt;. I will be working with miRNA isoform expression profiles.&lt;/p&gt;

&lt;details&gt;&lt;summary&gt;More on miRNA isoforms&lt;/summary&gt;
&lt;p&gt;

Each row in the isoforms file contains the calculated expression for an individual miRNA isoform observed, per sample. A common way to process this data is by taking the max or sum of all isoform counts associated with a specific miRNA. In this project, when there are multiple isoforms for a given miRNA in each sample, then the expression is summed. 

&lt;/p&gt;
&lt;/details&gt;

&lt;p&gt;Now, I move all the files out of their folders and into one directory. We can use &lt;a href=&quot;https://github.com/rptashkin/TCGA_miRNASeq_matrix&quot;&gt;rptashkin’s TCGA_miRNAseq_matrix&lt;/a&gt; R script to obtain a complete matrix of summed miRNA isoforms from the individual samples. &lt;em&gt;The rows represent miRNAs (our features), and the columns represent samples&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I add a row called “label” and manually label it with the corresponding cancer type (i.e., BRCA, ESCA, SKCM). Then, I repeat this process with all the cancer types (I had 17). Once I have 17 labeled matrices, I merge them in R, and transpose. Now, the final matrix has samples from all 17 cancer types, where the columns represent miRNAs, and the rows are samples. I randomize, split the label column from the real data, and import into Python for machine learning analysis.&lt;/p&gt;

&lt;details&gt;&lt;summary&gt;Importing R dataframe to Python&lt;/summary&gt;
&lt;p&gt;

There are several ways to do this. I wrote my R matrix to disc (in a .txt file), and then imported it into Python using Pandas. 
&lt;br /&gt;&lt;br /&gt;
After splitting my data into a train and test set, and isolating the labels columns, I converted the data frame to numpy array to use for further analysis. 

&lt;/p&gt;
&lt;/details&gt;

&lt;p&gt;This could have been done entirely in Python, but I wanted to utilize the pre-existing scripts, which were in R. Choose your battles!&lt;/p&gt;

&lt;h2 id=&quot;2-dna-methylation-expression-profiles&quot;&gt;2: DNA methylation expression profiles&lt;/h2&gt;

&lt;p&gt;DNA methylation was a little more complicated than miRNAs, and I could no longer use the same script to turn individual samples into one big matrix. So, I had to do some more digging.&lt;/p&gt;

&lt;h3 id=&quot;21-downloading-tcga-data-using-tcga2stat&quot;&gt;2.1: Downloading TCGA data using TCGA2STAT&lt;/h3&gt;

&lt;p&gt;I found an R package &lt;a href=&quot;http://www.liuzlab.org/TCGA2STAT/&quot;&gt;TCGA2STAT&lt;/a&gt; that enables users to directly download TCGA data into an analysis-ready format, which is exactly what I was looking for. (Turns out, we could’ve used this for miRNAs as well…)&lt;/p&gt;

&lt;p&gt;Because I only needed it for methylation, I extracted the code relevant to DNA methylation. The altered version is available in my &lt;a href=&quot;https://github.com/programmingprincess/tumor-origin/blob/master/dnam/tcga2stat.R&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TCGA2STAT allows you to specify the type of data you wish to download, but it is 27K by default. This type stands for the number of probes, or the number of features; 27K means 27,000 features. As this was the most commonly available type for TCGA (and conveniently smaller), I went ahead and downloaded the 27K types.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# 27K is selected by default&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methyl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTCGA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LUAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data.type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Methylation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# 450K example—450K isn't available for every dataset. Check in TCGA before downloading &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# methyl &amp;lt;- getTCGA(disease=&quot;LUAD&quot;, data.type=&quot;Methylation&quot;, type=&quot;450K&quot;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Table of samples vs. CpG site beta-values is found in $dat &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methyl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Script to see distribution of primary/metastatic/normal tissue. &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strsplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lapply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;`[[`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recursive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Replace sample names, transform, and add label.  &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replacement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'_'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as.data.frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Add row names to make sure table prints out correctly in .txt format &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Row.names&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rownames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write.table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paste0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LUAD-methyl-labeled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row.names&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col.names&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;$dat&lt;/code&gt; attribute of the returned data structure gives us a matrix, where, again, &lt;em&gt;the rows represent a CpG site and columns represent a sample&lt;/em&gt;. I transform the matrix, add a label for the origin site/disease type (i.e., LUAD), and store as a .txt file. This is repeated for each origin site I wanted to look at, and then all the .txt files are merged, resulting in a matrix with their labeled origin sites.&lt;/p&gt;

&lt;h3 id=&quot;22-feature-selection-in-r&quot;&gt;2.2: Feature selection in R&lt;/h3&gt;

&lt;p&gt;Since DNA methylation yields a much larger dataset, I did some feature selection before transforming the data matrix. I removed all features (CpG sites) with more than 30% “NA” values. If you want to go even further with the feature selection at this stage, you can consider filtering the matrix based on differential expression using &lt;a href=&quot;https://stackoverflow.com/questions/17003928/r-filter-matrix-based-on-variance-cut-offs&quot;&gt;variance cut-offs&lt;/a&gt; or &lt;a href=&quot;https://bioconductor.org/packages/release/bioc/html/limma.html&quot;&gt;limma&lt;/a&gt;. You can filter for differential expression between different origin sites, between tumor vs. normal tissue samples, etc.&lt;/p&gt;

&lt;h2 id=&quot;3-conclusion&quot;&gt;3: Conclusion&lt;/h2&gt;

&lt;p&gt;Now, we have two datasets ready to be analyzed in Python. Using just an out-of-the-box random forest classifier from SKLearn already yields decent results for most cancer types. However, I wanted to take it a step further to reduce the false negative rates for cancer types that have been traditionally difficult to classify (i.e., esophageal, pancreatic, and lung).&lt;/p&gt;

&lt;p&gt;If you are interested in the Tensorflow model I built to predict cancer type based on miRNAs and methylation, the code and results are available at &lt;a href=&quot;https://github.com/programmingprincess/tumor-origin&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main effort and largest learning curve was processing TCGA data, a step that I could only find very scattered documentation for. I hope this post helps others who are trying to work with microRNA and DNA methylation data for the first time. I would love to hear about what you did with this data!&lt;/p&gt;

&lt;p&gt;Here’s a list of resources I referenced for data processing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Biostar: &lt;a href=&quot;https://www.biostars.org/p/101182/&quot;&gt;miRNAseq isoform quantification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;R packages: &lt;a href=&quot;http://www.liuzlab.org/TCGA2STAT/&quot;&gt;TCGA2STAT&lt;/a&gt;, &lt;a href=&quot;https://bioconductor.org/packages/release/bioc/html/limma.html&quot;&gt;Bioconductor limma&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GitHub: &lt;a href=&quot;https://github.com/rptashkin/TCGA_miRNASeq_matrix&quot;&gt;rptashkin’s miRNAseq matrix script&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Stack Overflow: feature selection based on &lt;a href=&quot;https://stackoverflow.com/questions/17003928/r-filter-matrix-based-on-variance-cut-offs&quot;&gt;variance cut-offs&lt;/a&gt; in R&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tcga" /><category term="cancer" /><category term="bioinformatics" /><category term="machine learning" /><summary type="html">Last semester, I wanted to explore the role of epigenetic markers in differentiating types of cancers for a course project. I turned to The Cancer Genome Atlas’s (TCGA) data portal, which contains 7 types of genomic data for 33 types of cancer.</summary></entry></feed>